#!/bin/zsh

# Fetch database and files from Pantheon.
# Expects Pantheon sitename passed, uses live environment.
if type $terminus >/dev/null 2>&1; then
  if type terminus rsync >/dev/null 2>&1; then

    create_nginx () {
      restart=false
      if [[ ! -f "$nginx$1.conf" ]]; then
        echo 'Creating nginx configuration file...'
        eval cp "$nginxDefault $nginx$1.conf"
        echo 'Nginx configuration file added.'

        restart=true
        
        # Run again to edit file.
        create_nginx "$1"
      else
        echo 'Checking that nginx configuration is correct...'
        sed -i '' "s/localhost/$directory/g" "$nginx$1.conf"
        sed -i '' 's/# include \/usr\/local\/etc\/nginx\/conf.d\/drupal8.conf;/include \/usr\/local\/etc\/nginx\/conf.d\/drupal8.conf;/' "$nginx$1.conf"
        echo 'Nginx configuration complete.'

        if [[ $restart == true ]]; then
          echo "Restarting nginx, enter $USER's password when requested..."
          sudo brew services restart nginx
          echo 'Nginx restarted.'

          restart=false
        fi
      fi
    }

    what_project () {
      # Check with prefix.
      if [[ ! -d "$HOME/$projectsDirectory/$localValue" ]]; then
        echo
        echo 'What project are we building? Name of directory.'
        read directory
      fi
    }

    if [[ $localValue ]]; then
      # Check if provided directory exists locally.
      # Check without prefix first, as this is most likely.
      if [[ -d $HOME/$projectsDirectory/${localValue//$pantheonPrefix/} ]]; then
        directory=${localValue//$pantheonPrefix/}

        echo "Is $directory ok? Or should we name it something else? Respond y or n."
        read $response

        if [[ $response == 'y' || $response == 'yes' ]]; then
          echo '$directory it is. Continuing.'
        else
          what_project
        fi
      else
        # Check with prefix.
        what_project
      fi

      get_connection () {
        # If no $3, defaults to 'live'.
        env=${3:-'live'}

        # Use Terminus wake command to check existence of database.
        test=$(terminus env:wake $1.$env 2>&1)

        if [[ $test == *'error'* ]]; then
          echo
          echo 'Error returned:'
          echo $test
          echo
        fi

        if [[ $test == *'frozen'* ]]; then
          echo
          echo 'Frozen site, bailing.'
          exit 0
        fi

        if [[ $test == *'OK'* ]]; then
          sqlFile="$HOME/$projectsDirectory/$2/$2.sql"
          connection=$(terminus connection:info $1.$env --field='MySQL Command')
          connection=${connection/'mysql'/'mysqldump -v'}
          connection="$connection > $sqlFile"

          eval $connection
        else 
          echo
          echo 'Could not connect to live db, would you like another environments db? Which one? (dev, test, live)'
          read env

          if [[ $env ]]; then
            get_connection "$localValue" "$directory" "$env"
          fi
        fi
      }

      # Get code.
      if [[ ! -d "$HOME/$projectsDirectory/$directory" ]]; then
        gitConnection=$(terminus connection:info $localValue.dev --fields='Git Command' --format=string)
        gitConnection=${gitConnection/'aai'/"$HOME/$projectsDirectory/"}

        echo 'Grabbing code...'      
        eval $gitConnection
        echo 'Code complete.'
      else
        pull="cd $HOME/$projectsDirectory/$directory && git pull"
	      eval $pull
        echo 'Code pulled.'
      fi

      # Get database.
      get_connection "$localValue" "$directory"

      # Create local database.
      echo
      echo "Creating/updating $directory database..."
      create="mysql -u $sqlUser -p -e 'create database if not exists $directory'"
      eval $create
      echo 'Done.'

      # Import local database.
      echo
      echo 'Importing downloaded database into local database...'
      import="mysql -v -u $sqlUser -p $directory < $sqlFile"
      eval $import
      echo 'Done.'
      echo

      # Cleanup downloaded database file.
      if [[ -f $sqlFile ]]; then
        echo
        echo 'Cleaning up imported database file...'
        rm -rf $sqlFile
        echo 'Done.'
        echo
      fi
      
      # Create nginx configuration.
      if type 'nginx' >/dev/null 2>&1; then
        create_nginx "$directory"
      fi

      # Add Drupal settings file
      echo 'Coping over settings.local.php file...'
      if [[ -d "$HOME/$projectsDirectory/$directory/sites/default" ]]; then
        cp base/settings.local.php "$HOME/$projectsDirectory/$directory/sites/default"
        sed -i '' "s/\[database-name\]/$directory/" "$HOME/$projectsDirectory/$directory/sites/default/settings.local.php"
      else
        cp base/settings.local.php "$HOME/$projectsDirectory/$directory/web/sites/default"
        sed -i '' "s/\[database-name\]/$directory/" "$HOME/$projectsDirectory/$directory/web/sites/default/settings.local.php"
      fi
      echo 'Settings file created.'

      # Get files.
      if [[ -d "$HOME/$projectsDirectory/$directory" ]]; then
        get_subdirectory "$HOME/$projectsDirectory/" "$directory"

        echo 'Fetching files...'

        if [[ -z $env ]]; then
          echo
          echo 'Hold up, I need to know what environment to get the files from.'
          echo 'dev, test or live?'
          read env
          echo 'Ok, running amok. Hang tight.'
        fi

        # If no subdirectory is set, we know we are in the webroot.
        if [[ -z $sub ]]; then
          if [[ ! -d "$HOME/$projectsDirectory/$directory/sites/default/files" ]]; then
            mkdir "$HOME/$projectsDirectory/$directory/sites/default/files"
          fi

          sync="terminus rsync $localValue.$env:files/ $HOME/$projectsDirectory/$directory/sites/default/files -- --progress"
          eval $sync
        else
          if [[ ! -d "$HOME/$projectsDirectory/$directory/web/sites/default/files" ]]; then
            mkdir "$HOME/$projectsDirectory/$directory/web/sites/default/files"
          fi

          sync="terminus rsync $localValue.$env:files/ $HOME/$projectsDirectory/$directory/web/sites/default/files -- --progress"
          eval $sync
        fi

        echo 'Files retreived'
      fi
    fi
  else
    echo
    echo 'You need to install the awesomeness of terminus rsync, its a terminus plugin.'
    echo 'Mind if I install it? Respond y or n.'
    read response

    if [[ $response == 'y' || $response == 'yes' ]]; then
      if [[ ! -d $HOME/.terminus/plugins ]]; then
        echo 'Creating terminus plugins directory.'
        mkdir -p $HOME/.terminus/plugins
        echo 'Created.'
      else
        echo
        echo 'Terminus plugins directory already exists, moving along...'
      fi

      if [[ ! -d $HOME/.terminus/plugins/terminus-rsync-plugin ]]; then
        echo 'Installing Terminus Rsync Plugin...'
        composer create-project --no-dev -d $HOME/.terminus/plugins pantheon-systems/terminus-rsync-plugin:~1
        echo 'Plugin installed.'
      else
        echo 'Terminus Rsync Plugin is already installed... not sure how you got here, this is a bug. Add it to the issues queue: https://github.com/kazajhodo/launcher/issues'
        echo
      fi
    fi
  fi
fi
