#!/bin/zsh

# Fetch database and files from Pantheon.
# Expects Pantheon sitename passed, uses live environment.
if type $terminus >/dev/null 2>&1; then
  if type terminus rsync >/dev/null 2>&1; then

    pv_check () {
      if type pv >/dev/null 2>&1; then
        pv=true
      else
        pv=false
        echo
        echo 'We would like to install the pv module.'
        echo 'This is for showing you mysql import progress, while retaining speed.'
        
        is_ok 'Is this ok?'

        if [[ $response == true ]]; then
          echo 'Installing pv module with homebrew.'
          brew install pv
          pv=true
        else
          echo 'Mysql import will run without showing progress.'
        fi
      fi
    }

    create_nginx () {
      if [[ ! -f "$nginx$1.conf" ]]; then
        echo 'Creating nginx configuration file...'
        eval cp "$nginxDefault $nginx$1.conf"
        echo 'Nginx configuration file added.'

        # restart=true

        # Run again to edit file.
        create_nginx "$1"
      else
        echo 'Checking that nginx configuration is correct...'

        get_subdirectory "$homeovr/$projectsDirectory/" "$directory"

        if [[ -z $sub ]]; then
          sed -i '' "s/\/localhost/\/$directory/g" "$nginx$1.conf"
        else
          sed -i '' "s/\/localhost/\/$directory\/$sub/g" "$nginx$1.conf"
        fi

        sed -i '' "s/localhost\./$directory\./g" "$nginx$1.conf"

        sed -i '' 's/# include \/usr\/local\/etc\/nginx\/conf.d\/drupal8.conf;/include \/usr\/local\/etc\/nginx\/conf.d\/drupal8.conf;/' "$nginx$1.conf"

        echo 'Nginx configuration complete.'

        if [[ $restart == true ]]; then
          echo "Restarting nginx, enter $USER's password when requested..."
          restart=$(brew services restart nginx)
          eval $restart
          echo 'Nginx restarted.'
          echo

          restart=false
        fi
      fi
    }

    what_project () {
      # Check with prefix.
      if [[ ! -d "$homeovr/$projectsDirectory/$localValue" ]]; then
        echo
        echo 'What project are we building? Name of directory.'
        read directory
        echo
      fi
    }

    is_ok () {
      echo
      echo "$1 (y or n)"
      read response
      echo

      if [[ $response == 'y' || $response == 'yes' ]]; then
        response=true
      else
        response=false
      fi
    }

    get_connection () {
      # If no $3, defaults to 'live'.
      env=${3:-'live'}

      sqlFile="$homeovr/$projectsDirectory/$2/$2.sql"
      connection=$(terminus connection:info $1.$env --field='MySQL Command')
      connection=${connection/'mysql'/'mysqldump -v'}
      connection="$connection --skip-lock-tables --add-drop-table > $sqlFile"

      eval $connection
    }



    if [[ $localValue ]]; then
      # Set for nginx creation process later.
      restart=false

      # Check if provided directory exists locally.
      # Check without prefix first, as this is most likely.
      if [[ -d $homeovr/$projectsDirectory/${localValue//$pantheonPrefix/} ]]; then
        directory=${localValue//$pantheonPrefix/}

        is_ok "Is $directory for the directory name ok?"

        if [[ $response == true ]]; then
          echo "$directory it is. Continuing."
          echo
        else
          what_project
        fi
      else
        # Check with prefix.
        what_project
      fi

      # Get code.
      if [[ ! $targetedRun ]]; then
        if [[ ! -d "$homeovr/$projectsDirectory/$directory" ]]; then
          gitConnection=$(terminus connection:info $localValue.dev --fields='Git Command' --format=string)

          gitConnection=${gitConnection/'aai'/"$homeovr/$projectsDirectory/"}

          # Custom strips.
          # Remove '8' from end of string.
          gitConnection=${gitConnection%'8'}
          # Remove 'mna' from beginning of string.
          gitConnection=${gitConnection#'mna-'}
          
          # Replace localvalue with new directory value if exists.
          if [[ $directory ]]; then
            gitConnection=${gitConnection/"$localValue"/"$directory"}
          fi

          echo 'Grabbing code...'
          eval "cd $homeovr/$projectsDirectory && $gitConnection"
          echo 'Code complete.'
        else
          pull="cd $homeovr/$projectsDirectory/$directory && git pull"
          eval $pull
          echo 'Code pulled.'
        fi
      fi

      # Get database.
      if [[ ! $targetedRun || $databaseOnly ]]; then
        is_ok 'Download and import database?'

        if [[ $response == true ]]; then
          get_connection "$localValue" "$directory"

          # Create local database.
          echo
          echo "Creating/updating $directory database..."
          create="mysql -u $sqlUser -p -e 'create database if not exists $directory'"
          eval $create
          echo 'Done.'

          # Check if progress indication is available for mysql import.
          pv_check

          # Import local database.
          echo 'Importing downloaded database into local database...'

          if [[ $pv == true ]]; then
            import="pv $sqlFile | mysql -u $sqlUser -p $directory < $sqlFile"
          else
            import="mysql -u $sqlUser -p $directory < $sqlFile"
          fi

          eval $import
          echo 'Done.'
          echo

          # Cleanup downloaded database file.
          if [[ -f $sqlFile ]]; then
            echo
            echo 'Cleaning up imported database file...'
            rm -rf $sqlFile
            echo 'Done.'
            echo
          fi
        fi
      fi

      # Create nginx configuration.
      if [[ ! $targetedRun ]]; then
        if type 'nginx' >/dev/null 2>&1; then
          create_nginx "$directory"
        fi
      fi

      # TODO: Add settings file creation.
      # Add Drupal settings file
      # echo
      # echo 'Coping over settings.local.php file...'
      # if [[ -d "$homeovr/$projectsDirectory/$directory/sites/default" ]]; then
      #   cp "base/settings.local.php $homeovr/$projectsDirectory/$directory/sites/default"
      #   sed -i '' "s/\[database-name\]/$directory/" "$homeovr/$projectsDirectory/$directory/sites/default/settings.local.php"
      # else
      #   cp "base/settings.local.php $homeovr/$projectsDirectory/$directory/web/sites/default"
      #   sed -i '' "s/\[database-name\]/$directory/" "$homeovr/$projectsDirectory/$directory/web/sites/default/settings.local.php"
      # fi
      # echo 'Settings file created.'

      # Get files.
      if [[ ! $targetedRun || $filesOnly ]]; then
        if [[ -d "$homeovr/$projectsDirectory/$directory" ]]; then
          get_subdirectory "$homeovr/$projectsDirectory/" "$directory"

          is_ok 'Download files?'

          if [[ $response == true ]]; then
            # Detect Drupal or Wordpress
            wp_or_drupal "$homeovr/$projectsDirectory/$directory"

            # Default pull files from live environment.
            if [[ -z $env ]]; then
              env='live'
            fi

            # If no subdirectory is set, we know we are in the webroot.
            if [[ -z $sub ]]; then
              if [[ ! -d "$homeovr/$projectsDirectory/$directory/$filesPath" ]]; then
                mkdir "$homeovr/$projectsDirectory/$directory/$filesPath"
              fi

              sync="terminus rsync $localValue.$env:files/ $homeovr/$projectsDirectory/$directory/$filesPath -- --progress"
              eval $sync
            else
              if [[ ! -d "$homeovr/$projectsDirectory/$directory/web/$filesPath" ]]; then
                mkdir "$homeovr/$projectsDirectory/$directory/web/$filesPath"
              fi

              sync="terminus rsync $localValue.$env:files/ $homeovr/$projectsDirectory/$directory/web/$filesPath -- --progress"
              eval $sync
            fi

            echo 'Files retreived'
          else
            echo 'Skipped downloading files, until next time.'
            exit 0
          fi
        fi
      fi

    fi
  else
    is_ok 'You need to install the awesomeness of terminus rsync, its a terminus plugin. Mind if I install it?'

    if [[ $response == true ]]; then
      if [[ ! -d "$HOME/.terminus/plugins" ]]; then
        echo 'Creating terminus plugins directory.'
        mkdir "-p $HOME/.terminus/plugins"
        echo 'Created.'
      else
        echo
        echo 'Terminus plugins directory already exists, moving along...'
      fi

      if [[ ! -d "$HOME/.terminus/plugins/terminus-rsync-plugin" ]]; then
        echo 'Installing Terminus Rsync Plugin...'
        composer "create-project --no-dev -d $HOME/.terminus/plugins pantheon-systems/terminus-rsync-plugin:~1"
        echo 'Plugin installed.'
      else
        echo 'Terminus Rsync Plugin is already installed... not sure how you got here, this is a bug. Add it to the issues queue: https://github.com/kazajhodo/launcher/issues'
        echo
      fi
    fi
  fi
fi
